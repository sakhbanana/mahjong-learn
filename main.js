// main.js

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –º–∞–¥–∂–æ–Ω–≥–∞)
const tileNames = {
  'üÄá': '–ü–∏–Ω—å 1 (–∫—Ä—É–∂–æ–∫)', 'üÄà': '–ü–∏–Ω—å 2', 'üÄâ': '–ü–∏–Ω—å 3', 'üÄä': '–ü–∏–Ω—å 4', 'üÄã': '–ü–∏–Ω—å 5',
  'üÄå': '–ü–∏–Ω—å 6', 'üÄç': '–ü–∏–Ω—å 7', 'üÄé': '–ü–∏–Ω—å 8', 'üÄè': '–ü–∏–Ω—å 9',
  'üÄô': '–°–æ—É 1 (–±–∞–º–±—É–∫)', 'üÄö': '–°–æ—É 2', 'üÄõ': '–°–æ—É 3', 'üÄú': '–°–æ—É 4', 'üÄù': '–°–æ—É 5',
  'üÄû': '–°–æ—É 6', 'üÄü': '–°–æ—É 7', 'üÄ†': '–°–æ—É 8', 'üÄ°': '–°–æ—É 9',
  'üÄê': '–ú–∞–Ω—å 1 (–∏–µ—Ä–æ–≥–ª–∏—Ñ)', 'üÄë': '–ú–∞–Ω—å 2', 'üÄí': '–ú–∞–Ω—å 3', 'üÄì': '–ú–∞–Ω—å 4', 'üÄî': '–ú–∞–Ω—å 5',
  'üÄï': '–ú–∞–Ω—å 6', 'üÄñ': '–ú–∞–Ω—å 7', 'üÄó': '–ú–∞–Ω—å 8', 'üÄò': '–ú–∞–Ω—å 9',
  'üÄÄ': '–í–æ—Å—Ç–æ–∫', 'üÄÅ': '–Æ–≥', 'üÄÇ': '–ó–∞–ø–∞–¥', 'üÄÉ': '–°–µ–≤–µ—Ä',
  'üÄÜ': '–ó–µ–ª—ë–Ω—ã–π –¥—Ä–∞–∫–æ–Ω', 'üÄÖ': '–ö—Ä–∞—Å–Ω—ã–π –¥—Ä–∞–∫–æ–Ω'
  // –ë–µ–ª—ã–π –¥—Ä–∞–∫–æ–Ω (üÄÑ) —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ—Ä–µ–π—Å–∫–æ–º ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
};

// –ü–æ–∫–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ
document.addEventListener('click', (e) => {
  if (e.target.classList.contains('tile')) {
    const char = e.target.textContent.trim();
    const name = tileNames[char] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–ª';
    alert(`–¢–∞–π–ª: ${name}`);
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–≤—É–∫
    // playSound('click');
  }
});

// –ó–≤—É–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –ø–∞–ø–∫—É sounds/)
/*
function playSound(name) {
  const audio = new Audio(`sounds/${name}.mp3`);
  audio.play().catch(e => console.log("–ó–≤—É–∫ –æ—Ç–∫–ª—é—á—ë–Ω:", e));
}
*/

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
function checkHand(tiles) {
  const counts = {};
  tiles.forEach(t => counts[t] = (counts[t] || 0) + 1);

  const pungs = []; // —Å–µ—Ç—ã (3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö)
  const pairs = []; // –ø–∞—Ä—ã
  const singles = []; // –æ—Å—Ç–∞—Ç–∫–∏

  for (const [tile, count] of Object.entries(counts)) {
    if (count >= 3) {
      pungs.push(tile);
      if (count === 4) singles.push(tile); // —á–µ—Ç–≤—ë—Ä—Ç—ã–π ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è
    } else if (count === 2) {
      pairs.push(tile);
    } else {
      singles.push(...Array(count).fill(tile));
    }
  }

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–æ—É (—Ä—è–¥—ã) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –º–∞—Å—Ç–µ–π
  const numericTiles = singles.filter(t => 'üÄáüÄàüÄâüÄäüÄãüÄåüÄçüÄéüÄèüÄôüÄöüÄõüÄúüÄùüÄûüÄüüÄ†üÄ°üÄêüÄëüÄíüÄìüÄîüÄïüÄñüÄóüÄò'.includes(t));
  const chows = findChows(numericTiles);

  // –ì–æ—Ç–æ–≤–∞—è —Ä—É–∫–∞: 4 –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–ø—É–Ω–≥–∏/—á–æ—É) + 1 –ø–∞—Ä–∞
  const totalMelds = pungs.length + chows.length;
  const hasPair = pairs.length >= 1;

  return {
    pungs,
    chows,
    pairs,
    isComplete: totalMelds === 4 && hasPair
  };
}

// –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—á–æ—É) ‚Äî –æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–æ
function findChows(tiles) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Å—Ç–∏
  const suits = {
    pin: [], // üÄá-üÄè
    sou: [], // üÄô-üÄ°
    man: []  // üÄê-üÄò
  };

  tiles.forEach(t => {
    if ('üÄáüÄàüÄâüÄäüÄãüÄåüÄçüÄéüÄè'.includes(t)) suits.pin.push(t);
    else if ('üÄôüÄöüÄõüÄúüÄùüÄûüÄüüÄ†üÄ°'.includes(t)) suits.sou.push(t);
    else if ('üÄêüÄëüÄíüÄìüÄîüÄïüÄñüÄóüÄò'.includes(t)) suits.man.push(t);
  });

  let chowCount = 0;

  for (const suit of Object.values(suits)) {
    const codes = suit.map(t => t.codePointAt(0)).sort((a, b) => a - b);
    const unique = [...new Set(codes)];
    // –ò—â–µ–º —Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä—è–¥
    for (let i = 0; i <= unique.length - 3; i++) {
      if (unique[i+1] === unique[i] + 1 && unique[i+2] === unique[i] + 2) {
        chowCount++;
        // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        break;
      }
    }
  }

  return Array(chowCount).fill('chow');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è trainer.html)
window.checkHand = checkHand;
window.tileNames = tileNames;
